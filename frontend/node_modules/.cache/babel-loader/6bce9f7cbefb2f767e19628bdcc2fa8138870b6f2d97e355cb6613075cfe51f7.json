{"ast":null,"code":"const express = require('express');\nconst router = express.Router();\nconst userRepository = require('./user-repository');\nconst {\n  secret\n} = require('./url');\nrouter.post('/', (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  if (!email || !password) {\n    return res.status(400).json({\n      message: 'Email and password are required'\n    });\n  }\n  if (userRepository.getUserByEmail(email)) {\n    return res.status(409).json({\n      message: 'Email already exists'\n    });\n  }\n  const user = {\n    id: Date.now().toString(),\n    email,\n    password\n  };\n  userRepository.addUser(user);\n  const token = jwt.sign({\n    userId: user.id\n  }, secret, {\n    expiresIn: '1h'\n  });\n  res.status(201).json({\n    message: 'User created successfully',\n    token\n  });\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","userRepository","secret","post","req","res","email","password","body","status","json","message","getUserByEmail","user","id","Date","now","toString","addUser","token","jwt","sign","userId","expiresIn","module","exports"],"sources":["/Users/nichole/Desktop/proj/sqaFinals/frontend/src/components/Auth/Register.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst userRepository = require('./user-repository');\nconst { secret } = require('./url');\n\nrouter.post('/', (req, res) => {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n        return res.status(400).json({ message: 'Email and password are required' });\n    }\n\n    if (userRepository.getUserByEmail(email)) {\n        return res.status(409).json({ message: 'Email already exists' });\n    }\n\n    const user = { id: Date.now().toString(), email, password };\n    userRepository.addUser(user);\n    const token = jwt.sign({ userId: user.id }, secret, { expiresIn: '1h' });\n    res.status(201).json({ message: 'User created successfully', token });\n});\n\nmodule.exports = router;\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAMC,cAAc,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AACnD,MAAM;EAAEI;AAAO,CAAC,GAAGJ,OAAO,CAAC,OAAO,CAAC;AAEnCC,MAAM,CAACI,IAAI,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC3B,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGH,GAAG,CAACI,IAAI;EAEpC,IAAI,CAACF,KAAK,IAAI,CAACC,QAAQ,EAAE;IACrB,OAAOF,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAkC,CAAC,CAAC;EAC/E;EAEA,IAAIV,cAAc,CAACW,cAAc,CAACN,KAAK,CAAC,EAAE;IACtC,OAAOD,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAuB,CAAC,CAAC;EACpE;EAEA,MAAME,IAAI,GAAG;IAAEC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IAAEX,KAAK;IAAEC;EAAS,CAAC;EAC3DN,cAAc,CAACiB,OAAO,CAACL,IAAI,CAAC;EAC5B,MAAMM,KAAK,GAAGC,GAAG,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAET,IAAI,CAACC;EAAG,CAAC,EAAEZ,MAAM,EAAE;IAAEqB,SAAS,EAAE;EAAK,CAAC,CAAC;EACxElB,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;IAAEC,OAAO,EAAE,2BAA2B;IAAEQ;EAAM,CAAC,CAAC;AACzE,CAAC,CAAC;AAEFK,MAAM,CAACC,OAAO,GAAG1B,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}